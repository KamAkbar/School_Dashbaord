{"remainingRequest":"/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/akbar/Frontend/VueJS/School_Dashbaord/src/components/Add.vue?vue&type=template&id=8bc133be&","dependencies":[{"path":"/home/akbar/Frontend/VueJS/School_Dashbaord/src/components/Add.vue","mtime":1629356038827},{"path":"/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/akbar/Frontend/VueJS/School_Dashbaord/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}